# Cursor Rules - リサーチ・アナリスト・ライティング専用カスタムコマンド
# 使用方法: コメント内のコマンドをCursorのチャットで使用する

# ==================== リサーチ・分析関連 ====================

# ==================== ショートカットコマンド ====================

# /hl: ヘルプ・ショートカット一覧表示 (help --list の短縮版)

# ========== コーディング・開発系 ==========
# /ds: システム設計・アーキテクチャ (design --system --architecture の短縮版)
# /da: API設計・DDD (design --api --ddd の短縮版)
# /bd: TDD開発・ビルド (build --dev --tdd の短縮版)
# /ba: API開発・テスト (build --api --test の短縮版)
# /sc: セキュリティスキャン (scan --security --check の短縮版)
# /ts: トラブルシューティング (troubleshoot --investigate --system の短縮版)
# /pf: パフォーマンス改善 (improve --performance --optimize の短縮版)
# /rv: コードレビュー・品質 (review --code --quality の短縮版)
# /dc: ドキュメント生成 (generate --docs --code の短縮版)

# ========== リサーチ・分析系 ==========
# /rf: 暗号資産ファンダメンタル分析 (research --crypto --fundamental の短縮版)
# /rs: ニュース深掘りスクリーニング (research --news --screening の短縮版)
# /ma: マーケット分析・センチメント調査 (analyze --market --sentiment の短縮版)
# /dd: 特定トピック深掘り調査 (investigate --deep-dive --topic の短縮版)

# ========== ライティング系 ==========
# /wb: 初心者向けブログ記事作成 (write --blog --beginner の短縮版)
# /wt: 技術解説記事作成 (write --technical --explanation の短縮版)
# /ws: SNS配信文作成 (write --sns --multi の短縮版)
# /bt: ブログ→Twitter変換 (convert --blog-to-thread の短縮版)

# ========== アナリスト業務系 ==========
# /pr: ポートフォリオ分析 (analyze --portfolio --review の短縮版)
# /mm: 指標モニタリング (monitor --metrics --dashboard の短縮版)
# /ra: リスク評価 (evaluate --risk --assessment の短縮版)

# ==================== フルコマンド ====================

# /help --list: ショートカット一覧とクイックリファレンス表示
# 全ての利用可能なショートカットコマンドを分類別に整理して表示
# - 各コマンドの機能説明と使用例を含む
# - コピー&ペースト用の形式で出力
# - 初心者向けの使い方ガイドも併記

# ==================== コーディング・開発関連 ====================

# /design --system --architecture: システム設計・アーキテクチャ設計
# 大規模システムの設計パターンとアーキテクチャを提案
# - マイクロサービス、レイヤードアーキテクチャ、CQRS等の選択
# - スケーラビリティ、可用性、保守性を考慮した設計
# - 技術スタック選定の根拠と代替案を提示
# - ドキュメント生成と設計書テンプレート提供

# /design --api --ddd: API設計・ドメイン駆動設計
# DDD（ドメイン駆動設計）に基づくAPI設計を実施
# - ドメインモデルの抽出と整理
# - エンティティ、バリューオブジェクト、集約の設計
# - リポジトリパターンとサービス層の実装
# - RESTful API設計とOpenAPI仕様書生成

# /build --dev --tdd: TDD開発・アプリケーションビルド
# TDD（テスト駆動開発）でアプリケーションを構築
# - 失敗するテストの作成
# - テストを通すための最小実装
# - リファクタリングと品質向上
# - CI/CDパイプライン設定と自動化

# /build --api --test: API開発・統合テスト
# 高品質なAPIを開発し、包括的なテストを実装
# - エンドポイント実装とバリデーション
# - 統合テスト、E2Eテストの作成
# - モックサーバーとテストデータ準備
# - API性能テストと負荷テスト

# /scan --security --check: セキュリティスキャン・脆弱性検査
# 包括的なセキュリティ脆弱性のスキャンと対策提案
# - SQL インジェクション、XSS対策の確認
# - 認証・認可システムの実装確認
# - データ暗号化とプライバシー保護の確認
# - セキュリティベストプラクティスの適用

# /troubleshoot --investigate --system: システムトラブルシューティング
# 本番環境やシステム障害の原因調査と解決策提案
# - ログ解析とエラー原因の特定
# - パフォーマンスボトルネックの特定
# - システムリソース使用状況の分析
# - 障害復旧手順と予防策の提案

# /improve --performance --optimize: パフォーマンス改善・最適化
# システムパフォーマンスの分析と改善提案
# - データベースクエリ最適化
# - キャッシュ戦略とCDN活用
# - コード最適化とアルゴリズム改善
# - インフラストラクチャのスケーリング

# /review --code --quality: コードレビュー・品質評価
# コード品質の評価と改善提案を実施
# - コーディング規約とベストプラクティス確認
# - 設計パターンと保守性の評価
# - テストカバレッジと品質メトリクス分析
# - リファクタリング提案と技術的負債の特定

# /generate --docs --code: ドキュメント生成・コード解説
# 技術ドキュメントとコード解説を自動生成
# - API仕様書とコード仕様書の作成
# - README、設置手順、使用方法の文書化
# - コメント生成と技術解説
# - 新規開発者向けオンボーディング資料

# /research --crypto --fundamental: 暗号資産のファンダメンタル分析
# 6-8銘柄について期間限定でファンダメンタル要素を調査
# - 技術・開発、規制・コンプライアンス、市場・機関投資家動向を網羅
# - 各要素について「大・中・小」で価格影響度を評価
# - 具体的日付と情報源を必ず明記
# - TSUDOIテンプレート形式で出力

# /research --news --screening: ニュース深掘りスクリーニング
# 膨大なニュースから深掘り候補を選定するワークフロー
# - トークン直接性、規制インパクト、資金規模、競争優位、採用トラクション、時間軸の6基準でスコアリング（0-5点）
# - 合計20点以上または特定組み合わせで深掘り候補として抽出
# - 上位3-5件について追加リサーチ項目を提案

# /analyze --market --sentiment: マーケット分析・センチメント調査
# 市場動向とセンチメントを多角的に分析
# - オンチェーンデータ、取引所流入流出、ソーシャルメトリクス
# - 短期・中期・長期の時間軸別影響度評価
# - 投資行動への具体的示唆を含む

# /investigate --deep-dive --topic: 特定トピックの深掘り調査
# 単一トピックについて包括的な調査を実施
# - 背景、現状、影響範囲、関係者、今後の見通しを整理
# - プライマリソース（公式発表、規制文書）を優先
# - 信頼性の高い情報源のみを使用し、推測は避ける

# ==================== ライティング関連 ====================

# /write --blog --beginner: 初心者向けブログ記事作成
# 初心者が最後まで読み切れる魅力的なブログ記事を作成
# - キャッチーなタイトル（数字や疑問符使用）
# - 親しみやすい語りかけ調、専門用語は必ず初心者向け説明併記
# - 1文最大50文字、段落は3-4文で区切り、漢字:ひらがな=7:3
# - 2000-3000文字、読了時間3-5分
# - 最後に関連タグ10-15個を必ず追加

# /write --technical --explanation: 技術解説記事作成
# 技術的内容を分かりやすく解説する記事を作成
# - 「そもそも〜とは」から段階的に説明
# - 具体例を2-3個、図表挿入指示を含む
# - 初心者がつまずきやすいポイントを予測して先回り説明
# - チェックリスト形式で実践ステップを提供

# /write --sns --multi: SNS配信文（Twitter・Instagram）作成
# ブログ記事から効果的なSNS投稿文を生成
# - Twitter: 140文字以内、フック→価値提示→行動促進の構成
# - Instagram: 改行と絵文字を活用、コミュニティ感のある文章
# - 各プラットフォーム最適化したハッシュタグ戦略
# - エンゲージメント促進要素を含む

# /convert --blog-to-thread: ブログ記事→Twitter投稿シリーズ変換
# 既存ブログ記事を複数のTwitter投稿に分割・最適化
# - アルゴリズム対応の投稿タイミング調整
# - 各投稿の独立性と全体の一貫性を両立
# - リプライチェーン形式で構成

# ==================== アナリスト業務関連 ====================

# /analyze --portfolio --review: ポートフォリオ総合分析
# 投資ポートフォリオの包括的なレビューと最適化提案
# - リスク・リターン分析、セクター分散評価
# - マクロ環境要因の影響度評価
# - 具体的なリバランス提案と根拠

# /monitor --metrics --dashboard: 重要指標モニタリング設定
# 定点観測すべき指標とアラート設定の提案
# - TVL、ガバナンス投票、オンチェーンメトリクス
# - 閾値設定と自動化可能な項目の特定
# - 週次・月次レポート形式の提案

# /evaluate --risk --assessment: リスク評価・アセスメント
# 投資対象やプロジェクトのリスク評価を実施
# - 技術リスク、規制リスク、市場リスク、流動性リスクを評価
# - リスクレベルを数値化（1-10段階）
# - リスク軽減策と監視ポイントを提案

# ==================== 効率化・自動化関連 ====================

# /automate --workflow --optimize: ワークフロー自動化提案
# 現在のワークフローを分析し、自動化可能な部分を特定
# - Zapier、Google Apps Script、API連携の活用提案
# - 時間削減効果と実装難易度を評価
# - 段階的な導入プランを提示

# /template --create --custom: カスタムテンプレート作成
# 特定の用途に特化したテンプレート作成
# - 使用頻度の高い作業パターンをテンプレート化
# - コピー&ペースト用の形式で出力
# - バリエーション対応の柔軟性を確保

# ==================== 使用上の注意事項 ====================

# 【重要】常に以下を遵守してください：
# 1. 情報の正確性を最優先とし、確認できない情報は推測しない
# 2. 具体的な日付と信頼できる情報源を明記
# 3. 客観的根拠に基づく評価・判断を行う
# 4. 初心者向けコンテンツでは専門用語の説明を必ず併記
# 5. ファイル保存時は指定されたディレクトリ構造に従う
# 6. 日本語での回答を基本とし、親しみやすい語調を心がける

# ==================== ファイル管理規則 ====================

# 【保存先ディレクトリ】
# - ブログ記事: 30_Content_Creation/Blog_Posts/Drafts/
# - X投稿シリーズ: 30_Content_Creation/X_Threads/Drafts/
# - 分析レポート: 20_Topics_and_Insights/Analysis_Reports/
# - リサーチ結果: 50_Knowledge_Base/Research_Results/
# - テンプレート: 99_Templates/

# 【ファイル命名規則】
# - ブログ: [記事タイトル]_[YYYYMMDD].md
# - 分析: [銘柄名]_分析レポート_[YYYYMMDD].md
# - リサーチ: [トピック]_深掘り調査_[YYYYMMDD].md

# ==================== パフォーマンス最適化 ====================

# Cursorのパフォーマンスを維持するため：
# - 一度に処理する銘柄数は8個まで
# - ファイルサイズは10MB以下を推奨
# - 大量のデータ処理時は段階的に実行
# - 不要なファイルは定期的に.trash/に移動 